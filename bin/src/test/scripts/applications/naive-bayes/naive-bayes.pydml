#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Implements multinomial naive Bayes classifier with Laplace correction
#
# Example Usage:
# hadoop jar SystemML.jar -f naive-bayes.pydml -python -nvargs X=<Data> Y=<labels> classes=<Num Classes> laplace=<Laplace Correction> prior=<Model file1> conditionals=<Model file2> accuracy=<accuracy file> fmt="text"
#

# defaults
# $laplace = 1
fmt = ifdef($fmt, "text")

# reading input args
numClasses = $classes
D = load($X)
C = load($Y)
laplaceCorrection = ifdef($laplace, 1)

numRows = nrow(D)
numFeatures = ncol(D)

# Compute conditionals
# Compute the feature counts for each class
classFeatureCounts = aggregate(target=D, groups=C, fn="sum", ngroups=numClasses);

# Compute the total feature count for each class 
# and add the number of features to this sum
# for subsequent regularization (Laplace's rule)
classSums = rowSums(classFeatureCounts) + numFeatures*laplaceCorrection

# Compute class conditional probabilities
classConditionals = (classFeatureCounts + laplaceCorrection) / classSums

# Compute class priors
classCounts = aggregate(target=C, groups=C, fn="count", ngroups=numClasses)
classPrior = classCounts / numRows

# Compute accuracy on training set
lmodel1 = log(classConditionals)
lmodel2 = log(classPrior)
tlmodel1 = lmodel1.transpose()
tlmodel2 = lmodel2.transpose()
logProbs = dot(D, tlmodel1) + tlmodel2
acc = sum(rowIndexMax(logProbs) == C) / numRows * 100

acc_str = "Training Accuracy (%): " + acc
print(acc_str)
save(acc_str, $accuracy)

# write out the model
save(classPrior, $prior, format=fmt)
save(classConditionals, $conditionals, format=fmt)
